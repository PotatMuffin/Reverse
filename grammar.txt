[program]       : [stmt]*

[stmt]          : [scope_expr]
                : [expr]

[expr]          : asm(STRLIT)
                : [bin_expr]
                : [bin_expr]? return
                : [var_expr]

[scope_expr]    : [scope]
                : [else_expr]
                : [if_expr]
                : [while_expr]
                : [for_expr]
                : [func_expr]

[scope]         : { [program] }

[else_expr]     : [scope] else [if_expr]

[if_expr]       : [scope] ([expr]) if

[while_expr]    : [scope] ([expr]) while

[for_expr]      : [scope] ([expr]; [expr]; [expr]) for

[func_expr]     : [scope] ([IDENT [type]]*) IDENT [type]

[var_expr]      : [bin_expr] = IDENT [type]
                : [bin_expr] = IDENT

[type]          : IDENT[*]*

[bin_expr]      : [bin_expr] * [bin_expr]  | prec = 5
                : [bin_expr] % [bin_expr]  | prec = 5
                : [bin_expr] / [bin_expr]  | prec = 5
                : [bin_expr] + [bin_expr]  | prec = 4
                : [bin_expr] - [bin_expr]  | prec = 4
                : [bin_expr] & [bin_expr]  | prec = 3
                : [bin_expr] | [bin_expr]  | prec = 3
                : [bin_expr] ^ [bin_expr]  | prec = 3
                : [bin_expr] > [bin_expr]  | prec = 2
                : [bin_expr] < [bin_expr]  | prec = 2
                : [bin_expr] >> [bin_expr] | prec = 2
                : [bin_expr] << [bin_expr] | prec = 2
                : [bin_expr] >= [bin_expr] | prec = 2
                : [bin_expr] =< [bin_expr] | prec = 2
                : [bin_expr] == [bin_expr] | prec = 2
                : [bin_expr] != [bin_expr] | prec = 2
                : [bin_expr] && [bin_expr] | prec = 1
                : [bin_expr] || [bin_expr] | prec = 1
                : [atom]

[atom]          : INTLIT
                : STRLIT
                : ([bin_expr])
                : -[atom]
                : ![atom]
                : &[atom]
                : *[atom]
                : IDENT
                : ([bin_expr]*)IDENT